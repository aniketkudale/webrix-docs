(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{NLay:function(e,n,t){"use strict";t.r(n),n.default="import {Example} from 'components';\nimport './style.scss';\n\nThe `<Movable/>` component can be used to create items that can be move around. As opposed to a draggable element,\nthe `<Movable/>` component does not require a source/target configuration. All it does it trigger an event when the user\nmoves it around, passing the mouse position (`x/y`), the difference in the coordinates since the beginning of the event\n(`dx/dy`), and the difference in the coordinates since the last event (`cx/cy`)\n\n\nName|Type|Default|Description\n---|---|---|---\n`onBeginMove`|func|`() => null`|Specifies a callback to be called when the user begins to move the element\n`onMove`|func|`() => null`|Specifies a callback to be continuously called as the user moves the element around. Receives `x/y/dx/dy/cx/cy` as arguments (see description above for more info)\n`onEndMove`|func|`() => null`|Specifies a callback to be called when the user stops moving the element\n\n# Basic Example\n\n<Example file='components/Movable/BasicExample'/>\n\nIn this example you can see how, using the `onMove`, we can change the element coordinates based on `cx/cy`.\n\nNotice that we are using a function to set the state, instead of passing an object directly.\nThis is because the [state may be updated asynchronously](https://reactjs.org/docs/state-and-lifecycle.html#state-updates-may-be-asynchronous),\nso we cannot rely on the state value for calculating the next position.\n\nUsing a function will give us the previous state as an argument, and we can use that to accurately calculate the\nnext position.\n\n# Constraint Movement\n\n<Example file='components/Movable/ConstraintMovement'/>\n\nThe `<Movable/>` component gives you complete control over the positioning of the element by only passing information\nthrough the event without actually manipulating the element itself.\nThis way you are free to add your own logic and constraints.\n\nIn this example, we ignore the movement of the mouse on the `x` axis to constraint the element to the `y`\naxis.\n\n# Snapping\n\n<Example file='components/Movable/Snapping'/>\n\nSimilarly to the previous example, more complex constraints can be applied, like snapping.\nThis can be achieved by applying the following formula to the coordinates of the element:\n\n```jsx\nconst GRID_SIZE = 20;\nMath.round(x / GRID_SIZE) * GRID_SIZE;\n```\n\nThe main difference is that we are no longer updating the state for every event (the user can move\nthe mouse without the object moving with it until it snaps to the next grid line).\nBecause of that, we need to maintain the initial position of the element, and use `dx/dy`\ninstead to get the next position.\n"}}]);