(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{NLay:function(e,n,t){"use strict";t.r(n),n.default="import {Example} from 'components';\n\nThe `<Movable/>` component can be used to create items that can be move around. As opposed to a draggable element,\nthe `<Movable/>` component does not require a source/target configuration. All it does it trigger an event when the user\nmoves it around, passing the mouse position (`x/y`), the difference in the coordinates since the beginning of the event\n(`dx/dy`), and the difference in the coordinates since the last event (`cx/cy`)\n\n\nName|Type|Default|Description\n---|---|---|---\n`onBeginMove`|func|`() => null`|Specifies a callback to be called when the user begins to move the element\n`onMove`|func|`() => null`|Specifies a callback to be continuously called as the user moves the element around. Receives `x/y/dx/dy/cx/cy` as arguments (see description above for more info)\n`onEndMove`|func|`() => null`|Specifies a callback to be called when the user stops moving the element\n\n# Basic Example\n\n<Example file='components/Movable/BasicExample'/>\n\nIn this example you can see how, using the `onMove`, we can change the element coordinates based on `dx/dy` and\nthe initial position.\n\n```jsx\n<Movable onMove={...}/>\n```\n\n# Constraint Movement\n\nThe `<Movable/>` component gives you complete control over the positioning of the element by only passing information\nthrough the event without actually manipulating the element itself. This can be used to apply constraints on the\nelement. In this example, we ignore the movement of the mouse on the `x` axis to constraint the element to the `y`\naxis.\n\n# Snapping\n\nSimilarly to the previous example, more complex constraints can be applied, like snapping.\nThis can be achieved by applying the following to the coordinates of the element:\n\n```jsx\nconst GRID_SIZE = 20;\nMath.round(x / GRID_SIZE) * GRID_SIZE;\n```\n"}}]);